\documentclass[a4paper, 11pt]{article}
\usepackage{comment} % enables the use of multi-line comments (\ifx \fi) 
\usepackage{fullpage} % changes the margin
\usepackage[linesnumbered,ruled,french, onelanguage]{algorithm2e}
\RestyleAlgo{boxruled}
\usepackage{amsmath}
\usepackage[makeroom]{cancel}

\SetKwIF{Si}{SinonSi}{sinon}{Si}{}{Sinon si}{}{}
\SetKwFor{Pour}{Pour}{}{}

\begin{document}
\noindent
\large\textbf{Mini-Projet C++} \hfill \textbf{RIBER Rafael} \\
\large\textbf{ColoReduce}\\
\normalsize ICC Pratique - CS-119\\
\hfill Novembre - Décembre 2018

\section*{Phase d'analyse}

\section*{Algorithme de filtrage}

\begin{algorithm}[H]
\SetSideCommentLeft
    \KwIn{Image normalisée $N$ de taille $C \times L$, nombre de filtres à appliquer $f$, nombre de couleurs réduites de l'image $r$.}
    \KwResult{Image filtrée $f$ fois}
    %\underline{Filtrage}$(N,x,y,f,r)$\
    $copie \gets N$\\
    $val \gets 0$\\
    $count$ est une liste de longueur fixe $r$.
    
    \Pour{$n$ \upshape{de} $0$ \upshape{à} $f$}
      {
      	\Pour{$x$ \upshape{de} $1$ \upshape{à} $C - 1$}
      	  {
      	  \Pour{$y$ \upshape{de} $1$ \upshape{à} $L - 1$}
      	    {
    			$current \gets 0$\\
   				\Pour{$i$ \upshape{de} $-1$ \upshape{à} $1$}
   				  {
   				  	\Pour{$j$ \upshape{de} $-1$ \upshape{à} $1$}
   				  	  {
   				  	  	\Si{$i \neq 0$ \upshape{ou} $j \neq 0$}
   				  	  	  {
   				  	  	    $current \gets copy$[$x + i$][$y + j$]\\
   				  	  	  	\Pour{$c$ \upshape{de} $0$ \upshape{à} $r$}
   				  	  	  	  {
   				  	  	  	  	\Si {$c = current$}
   				  	  	  	  		{
   				  	  	  	  			$count$[$c$] = $count$[$c$]$ + 1$\\
   				  	  	  	  			\Si {$count$\upshape{[$c$]} $\geq 6$}
   				  	  	  	  			  {
   				  	  	  	  			    $val \gets c$
   				  	  	  	  			  }
   				  	  	  	  			\Sinon{$val \gets 0$}
   				  	  	  	  		}
   				  	  	  	  }
   				  	  	  }
   				  	  }
   				  }
   			 
             $N$[$x$][$y$] $\gets val$
      	    }
      	  }
      	  $copie \gets N$
        }
        \Si{$f > 0$} 
          {
        	\Pour{$i$ \upshape{de} $0$ \upshape{à} $L$} 
        	{
        	  \Pour{$j$ \upshape{de} $0$ \upshape{à} $C$}
        	  {
                \Si{$i = 0$ \upshape{ou} $j = 0$ \upshape{ou} $i = L - 1$ \upshape{ou} $j = nbC - 1$}
                  {
                    $N$[$i$][$j$] $\gets 0$
                  }
              }
            }
        }
\caption{ \textsc{Filtrage}}
\end{algorithm}

\section*{Analyse de complexité}
Dans le pire des cas, on parcourt tous les pixels n'étant pas en bordure de l'image (de dimensions $c\cdot l$) $f$ fois, puis les pixels de bordure une seule fois.\\

On a donc $N_i = (c - 2)(l-2)$ pixels à filtrer $f$ fois, et $N_b = (2c + 2(l-2))$ pixels en bordure, ce qui donne:
\begin{align}
N_{pixels} &= f \cdot N_i + N_b \nonumber \\
 &= \underbrace{f \cdot (c-2)(l-2)}_{\text{filtrage}} + \underbrace{(2c + 2(l-2))}_{bordure} \nonumber \\
&= flc - 2fc - 2fl + 4f + 2c \nonumber \\
&= flc - f \cdot \bigg(2c + 2l - 4 - \frac{2c}{f}\bigg) \leq fcl \\
N_{pixels} &\leq fcl
\end{align}

On a ainsi une complexité de $\mathcal{O}(N_{pixels})$ c'est à dire $\mathcal{O}(f \cdot C \cdot L)$, et donc une complexité de type linéaire $\mathcal{O}(n)$.

\end{document}